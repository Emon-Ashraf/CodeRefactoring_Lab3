Description of the shortcoming (Primitive Obsession in Password Handling):
The `User` class uses a plain `string` to represent a password hash and contains the hashing logic directly inside it. This is a typical example of Primitive Obsession, where raw strings are used instead of a dedicated domain object to encapsulate password-related behavior and validation.

Brief description of the selected refactoring method:
Refactoring Method: Replace Primitive with Value Object.
Created a new `Password` class that encapsulates password hashing and comparison logic. The `User` class now delegates all password operations (hashing and authentication) to this new class. This isolates password logic, respects the Single Responsibility Principle, and avoids duplicate hashing logic across the system.

Why chosen:
By encapsulating password behavior inside a dedicated class, the code becomes more modular, secure, and easier to test or change. It also prevents misuse by making sure password operations are handled consistently.

Conclusion:
This refactoring improves maintainability and readability, enforces better encapsulation, and avoids repetition of hashing logic. It allows secure, centralized handling of password operations and eliminates primitive obsession in the user authentication logic.
